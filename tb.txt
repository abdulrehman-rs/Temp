`timescale 1 ps / 1 ps
​
module design_1_wrapper
   (ddr4_rtl_0_act_n,
    ddr4_rtl_0_adr,
    ddr4_rtl_0_ba,
    ddr4_rtl_0_bg,
    ddr4_rtl_0_ck_c,
    ddr4_rtl_0_ck_t,
    ddr4_rtl_0_cke,
    ddr4_rtl_0_cs_n,
    ddr4_rtl_0_dm_n,
    ddr4_rtl_0_dq,
    fan_pwm,
    ddr4_rtl_0_dqs_c,
    ddr4_rtl_0_dqs_t,
    ddr4_rtl_0_odt,
    ddr4_rtl_0_reset_n,
    diff_clock_rtl_0_clk_n,
    diff_clock_rtl_0_clk_p,
    reset_rtl_0,
    reset_rtl_0_0);
  output ddr4_rtl_0_act_n;
  output fan_pwm;
  output [16:0]ddr4_rtl_0_adr;
  output [1:0]ddr4_rtl_0_ba;
  output [0:0]ddr4_rtl_0_bg;
  output [0:0]ddr4_rtl_0_ck_c;
  output [0:0]ddr4_rtl_0_ck_t;
  output [0:0]ddr4_rtl_0_cke;
  output [0:0]ddr4_rtl_0_cs_n;
  inout [0:0]ddr4_rtl_0_dm_n;
  inout [7:0]ddr4_rtl_0_dq;
  inout [0:0]ddr4_rtl_0_dqs_c;
  inout [0:0]ddr4_rtl_0_dqs_t;
  output [0:0]ddr4_rtl_0_odt;
  output ddr4_rtl_0_reset_n;
  input diff_clock_rtl_0_clk_n;
  input diff_clock_rtl_0_clk_p;
  input reset_rtl_0;
  input reset_rtl_0_0;
​
  wire ddr4_rtl_0_act_n;
  wire [16:0]ddr4_rtl_0_adr;
  wire [1:0]ddr4_rtl_0_ba;
  wire [0:0]ddr4_rtl_0_bg;
  wire [0:0]ddr4_rtl_0_ck_c;
  wire [0:0]ddr4_rtl_0_ck_t;
  wire [0:0]ddr4_rtl_0_cke;
  wire [0:0]ddr4_rtl_0_cs_n;
  wire [0:0]ddr4_rtl_0_dm_n;
  wire [7:0]ddr4_rtl_0_dq;
  wire [0:0]ddr4_rtl_0_dqs_c;
  wire [0:0]ddr4_rtl_0_dqs_t;
  wire [0:0]ddr4_rtl_0_odt;
  wire ddr4_rtl_0_reset_n;
  wire diff_clock_rtl_0_clk_n;
  wire diff_clock_rtl_0_clk_p;
  wire reset_rtl_0;
  wire reset_rtl_0_0;
​
  design_1 design_1_i
       (.ddr4_rtl_0_act_n(ddr4_rtl_0_act_n),
        .ddr4_rtl_0_adr(ddr4_rtl_0_adr),
        .ddr4_rtl_0_ba(ddr4_rtl_0_ba),
        .ddr4_rtl_0_bg(ddr4_rtl_0_bg),
        .ddr4_rtl_0_ck_c(ddr4_rtl_0_ck_c),
        .ddr4_rtl_0_ck_t(ddr4_rtl_0_ck_t),
        .ddr4_rtl_0_cke(ddr4_rtl_0_cke),
        .ddr4_rtl_0_cs_n(ddr4_rtl_0_cs_n),
        .ddr4_rtl_0_dm_n(ddr4_rtl_0_dm_n),
        .ddr4_rtl_0_dq(ddr4_rtl_0_dq),
        .ddr4_rtl_0_dqs_c(ddr4_rtl_0_dqs_c),
        .ddr4_rtl_0_dqs_t(ddr4_rtl_0_dqs_t),
        .ddr4_rtl_0_odt(ddr4_rtl_0_odt),
        .ddr4_rtl_0_reset_n(ddr4_rtl_0_reset_n),
        .diff_clock_rtl_0_clk_n(diff_clock_rtl_0_clk_n),
        .diff_clock_rtl_0_clk_p(diff_clock_rtl_0_clk_p),
        .reset_rtl_0(reset_rtl_0),
        .reset_rtl_0_0(reset_rtl_0_0));
        assign fan_pwm=1'b1;
endmodule
module design_1_wrapper_tb;
​
  // Parameters
​
  // Ports
  wire ddr4_rtl_0_act_n;
  wire fan_pwm;
  wire [16:0] ddr4_rtl_0_adr;
  wire [1:0] ddr4_rtl_0_ba;
  wire [0:0] ddr4_rtl_0_bg;
  wire [0:0] ddr4_rtl_0_ck_c;
  wire [0:0] ddr4_rtl_0_ck_t;
  wire [0:0] ddr4_rtl_0_cke;
  wire [0:0] ddr4_rtl_0_cs_n;
  wire [0:0] ddr4_rtl_0_dm_n;
  wire [7:0] ddr4_rtl_0_dq;
  wire [0:0] ddr4_rtl_0_dqs_c;
  wire [0:0] ddr4_rtl_0_dqs_t;
  wire [0:0] ddr4_rtl_0_odt;
  wire ddr4_rtl_0_reset_n;
  reg diff_clock_rtl_0_clk_n = 0;
  reg diff_clock_rtl_0_clk_p = 0;
  reg reset_rtl_0 = 0;
  reg reset_rtl_0_0 = 0;
​
  design_1_wrapper 
  design_1_wrapper_dut (
    .ddr4_rtl_0_act_n (ddr4_rtl_0_act_n ),
    .fan_pwm (fan_pwm ),
    .ddr4_rtl_0_adr (ddr4_rtl_0_adr ),
    .ddr4_rtl_0_ba (ddr4_rtl_0_ba ),
    .ddr4_rtl_0_bg (ddr4_rtl_0_bg ),
    .ddr4_rtl_0_ck_c (ddr4_rtl_0_ck_c ),
    .ddr4_rtl_0_ck_t (ddr4_rtl_0_ck_t ),
    .ddr4_rtl_0_cke (ddr4_rtl_0_cke ),
    .ddr4_rtl_0_cs_n (ddr4_rtl_0_cs_n ),
    .ddr4_rtl_0_dm_n (ddr4_rtl_0_dm_n ),
    .ddr4_rtl_0_dq (ddr4_rtl_0_dq ),
    .ddr4_rtl_0_dqs_c (ddr4_rtl_0_dqs_c ),
    .ddr4_rtl_0_dqs_t (ddr4_rtl_0_dqs_t ),
    .ddr4_rtl_0_odt (ddr4_rtl_0_odt ),
    .ddr4_rtl_0_reset_n (ddr4_rtl_0_reset_n ),
    .diff_clock_rtl_0_clk_n (diff_clock_rtl_0_clk_n ),
    .diff_clock_rtl_0_clk_p (diff_clock_rtl_0_clk_p ),
    .reset_rtl_0 (reset_rtl_0 ),
    .reset_rtl_0_0  ( reset_rtl_0_0)
  );
​
  initial begin
    begin
      $finish;
    end
  end
​
  always
    #5  diff_clock_rtl_0_clk_n = ! diff_clock_rtl_0_clk_n ;
  always
    #5  diff_clock_rtl_0_clk_p = ! diff_clock_rtl_0_clk_p ;
​
endmodule


#https://docs.xilinx.com/v/u/2014.1-English/ug974-vivado-ultrascale-libraries


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

set_property PACKAGE_PIN R25 [get_ports cfg_rst_no_0]
set_property PACKAGE_PIN W23 [get_ports clk_out2]
set_property PACKAGE_PIN R26 [get_ports cfg_blsr_region_0_clk_o_0]
set_property PACKAGE_PIN P23 [get_ports cfg_blsr_region_0_ren_o_0]
set_property PACKAGE_PIN T25 [get_ports cfg_blsr_region_0_wen_o_0]
set_property PACKAGE_PIN M22 [get_ports cfg_wlsr_region_0_wen_o_0]
set_property PACKAGE_PIN L27 [get_ports cfg_blsr_head_f2e_ot]
set_property PACKAGE_PIN L23 [get_ports cfg_blsr_tail_e2f]
set_property PACKAGE_PIN R23 [get_ports cfg_done_o_0]
set_property PACKAGE_PIN M27 [get_ports cfg_wlsr_head_f2e_ot]
set_property PACKAGE_PIN K25 [get_ports cfg_wlsr_region_0_clk_o_0]
set_property PACKAGE_PIN L25 [get_ports cfg_wlsr_region_0_ren_o_0]
set_property PACKAGE_PIN N22 [get_ports cfg_wlsr_tail_e2f]
set_property PACKAGE_PIN AA25 [get_ports clk_out1]
set_property PACKAGE_PIN W24 [get_ports clk_out3]
set_property PACKAGE_PIN AA24 [get_ports clk_out4]
set_property PACKAGE_PIN AK17 [get_ports clk_in1_0]
set_property C_CLK_INPUT_FREQ_HZ 300000000 [get_debug_cores dbg_hub]
set_property C_ENABLE_CLK_DIVIDER false [get_debug_cores dbg_hub]
set_property C_USER_SCAN_CHAIN 1 [get_debug_cores dbg_hub]
connect_debug_port dbg_hub/clk [get_nets clk]
set_property PACKAGE_PIN AK8  [get_ports ext_reset_in]
////////////////////////////////////////////////////////////////////////////////
assign cfg_blsr_region_0_i_0 = {cfg_blsr_tail_e2f,31'h0};
assign cfg_wlsr_region_0_i_0 = {cfg_wlsr_tail_e2f,31'h0};
assign cfg_blsr_head_f2e_ot = cfg_blsr_region_0_o_0[0];
assign cfg_wlsr_head_f2e_ot = cfg_wlsr_region_0_o_0[0]; 
/////////////////////////////////////////////////////////////////////

set_property PACKAGE_PIN AC21 [get_ports gpio_data_0[0]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[0]]
set_property PACKAGE_PIN AC22 [get_ports gpio_data_0[1]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[1]]
set_property PACKAGE_PIN AC23 [get_ports gpio_data_0[2]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[2]]
set_property PACKAGE_PIN AA22 [get_ports gpio_data_0[3]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[3]]
set_property PACKAGE_PIN AB22 [get_ports gpio_data_0[4]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[4]]
set_property PACKAGE_PIN AD25 [get_ports gpio_data_0[5]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[5]]
set_property PACKAGE_PIN AA28 [get_ports gpio_data_0[6]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[6]]
set_property PACKAGE_PIN AB24 [get_ports gpio_data_0[7]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[7]]
set_property PACKAGE_PIN AC24 [get_ports gpio_data_0[8]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[8]]
set_property PACKAGE_PIN AB25 [get_ports gpio_data_0[9]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[9]]
set_property PACKAGE_PIN AB26 [get_ports gpio_data_0[10]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[10]]
set_property PACKAGE_PIN AC26 [get_ports gpio_data_0[11]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[11]]
set_property PACKAGE_PIN AC27 [get_ports clk_2dut_0]
set_property IOSTANDARD LVCMOS18 [get_ports clk_2dut_0]
set_property PACKAGE_PIN Y26 [get_ports rst_2dut_0]
set_property IOSTANDARD LVCMOS18 [get_ports rst_2dut_0]
set_property PACKAGE_PIN Y27 [get_ports gpio_data_0[12]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[12]]
set_property PACKAGE_PIN AA27 [get_ports gpio_data_0[13]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[13]]
set_property PACKAGE_PIN AB27 [get_ports gpio_data_0[14]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[14]]
set_property PACKAGE_PIN V21 [get_ports gpio_data_0[15]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[15]]
set_property PACKAGE_PIN W21 [get_ports gpio_data_0[16]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[16]]
set_property PACKAGE_PIN AA20 [get_ports gpio_data_0[17]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[17]]
set_property PACKAGE_PIN AB20 [get_ports gpio_data_0[18]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[18]]
set_property PACKAGE_PIN W25 [get_ports gpio_data_0[19]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[19]]
set_property PACKAGE_PIN Y25 [get_ports gpio_data_0[20]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[20]]
set_property PACKAGE_PIN V22 [get_ports gpio_data_0[21]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[21]]
set_property PACKAGE_PIN V23 [get_ports gpio_data_0[22]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[22]]
set_property PACKAGE_PIN T22 [get_ports gpio_data_0[23]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[23]]
set_property PACKAGE_PIN T23 [get_ports gpio_data_0[24]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[24]]
set_property PACKAGE_PIN U21 [get_ports gpio_data_0[25]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[25]]
set_property PACKAGE_PIN U22 [get_ports gpio_data_0[26]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[26]]
set_property PACKAGE_PIN AB30 [get_ports gpio_data_0[27]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[27]]
set_property PACKAGE_PIN AB31 [get_ports gpio_data_0[28]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[28]]
set_property PACKAGE_PIN AA32 [get_ports gpio_data_0[29]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[29]]
set_property PACKAGE_PIN AB32 [get_ports gpio_data_0[30]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[30]]
set_property PACKAGE_PIN AG31 [get_ports gpio_data_0[31]]
set_property IOSTANDARD LVCMOS18 [get_ports gpio_data_0[31]]

set_property PACKAGE_PIN AG32 [get_ports {gpio_pins[34]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[34]}]
set_property PACKAGE_PIN AF30 [get_ports {gpio_pins[35]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[35]}]
set_property PACKAGE_PIN AG30 [get_ports {gpio_pins[36]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[36]}]
set_property PACKAGE_PIN AE33 [get_ports {gpio_pins[37]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[37]}]
set_property PACKAGE_PIN AF34 [get_ports {gpio_pins[38]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[38]}]
set_property PACKAGE_PIN AF33 [get_ports {gpio_pins[39]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[39]}]
set_property PACKAGE_PIN AG34 [get_ports {gpio_pins[40]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[40]}]
set_property PACKAGE_PIN AF29 [get_ports {gpio_pins[41]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[41]}]
set_property PACKAGE_PIN AG29 [get_ports {gpio_pins[42]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[42]}]
set_property PACKAGE_PIN AC34 [get_ports {gpio_pins[43]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[43]}]
set_property PACKAGE_PIN AD34 [get_ports {gpio_pins[44]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[44]}]
set_property PACKAGE_PIN AE32 [get_ports {gpio_pins[45]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[45]}]

set_property PACKAGE_PIN AF32 [get_ports {gpio_pins[46]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[46]}]
set_property PACKAGE_PIN AA29 [get_ports {gpio_pins[47]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[47]}]
set_property PACKAGE_PIN AB29 [get_ports {gpio_pins[48]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[48]}]
set_property PACKAGE_PIN AB30 [get_ports {gpio_pins[49]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[49]}]
set_property PACKAGE_PIN AB31 [get_ports {gpio_pins[50]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[50]}]
set_property PACKAGE_PIN AA34 [get_ports {gpio_pins[51]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[51]}]
set_property PACKAGE_PIN AB34 [get_ports {gpio_pins[52]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[52]}]
set_property PACKAGE_PIN AC33 [get_ports {gpio_pins[53]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[53]}]
set_property PACKAGE_PIN AD33 [get_ports {gpio_pins[54]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[54]}]
set_property PACKAGE_PIN AE28 [get_ports {gpio_pins[55]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[55]}]
set_property PACKAGE_PIN AF28 [get_ports {gpio_pins[56]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[56]}]
set_property PACKAGE_PIN AA29 [get_ports {gpio_pins[57]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[57]}]
set_property PACKAGE_PIN AE30 [get_ports {gpio_pins[58]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[58]}]
set_property PACKAGE_PIN AE27 [get_ports {gpio_pins[59]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[59]}]
set_property PACKAGE_PIN AF27 [get_ports {gpio_pins[60]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[60]}]
set_property PACKAGE_PIN AC28 [get_ports {gpio_pins[61]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[61]}]
set_property PACKAGE_PIN AD28 [get_ports {gpio_pins[62]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[62]}]


set_property PACKAGE_PIN AG11 [get_ports {gpio_pins[63]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[63]}]
set_property PACKAGE_PIN AH11 [get_ports {gpio_pins[64]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[64}]
set_property PACKAGE_PIN AF10 [get_ports {gpio_pins[65]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[65]}]
set_property PACKAGE_PIN AG10 [get_ports {gpio_pins[66]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[66]}]
set_property PACKAGE_PIN AN13 [get_ports {gpio_pins[67]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[67]}]
set_property PACKAGE_PIN AP13 [get_ports {gpio_pins[68]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[68]}]
set_property PACKAGE_PIN AK13 [get_ports {gpio_pins[69]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[69]}]
set_property PACKAGE_PIN AL13 [get_ports {gpio_pins[70]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[70]}]
set_property PACKAGE_PIN AD11 [get_ports {gpio_pins[71]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[71]}]
set_property PACKAGE_PIN AE11 [get_ports {gpio_pins[72]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[72]}]
set_property PACKAGE_PIN AM12 [get_ports {gpio_pins[73]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[73]}]
set_property PACKAGE_PIN AN12 [get_ports {gpio_pins[74]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[74]}]
set_property PACKAGE_PIN AH12 [get_ports {gpio_pins[75]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[75]}]
set_property PACKAGE_PIN AJ13 [get_ports {gpio_pins[76]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[76]}]
set_property PACKAGE_PIN AF9 [get_ports {gpio_pins[77]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[77]}]
set_property PACKAGE_PIN AG9 [get_ports {gpio_pins[78]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[78]}]


set_property PACKAGE_PIN AD10 [get_ports {gpio_pins[79]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[79]}]
set_property PACKAGE_PIN AB21 [get_ports {gpio_pins[rst_n]}]
set_property IOSTANDARD LVCMOS18 [get_ports {gpio_pins[rst_n]}]


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\clk_rst_gen\\\\\\\\\\\\\\\\\\

`timescale 1 ns / 1 ps

	module clk_rst_gen #
	(
		// Users to add parameters here

		// User parameters ends
		// Do not modify the parameters beyond this line

		// Width of S_AXI data bus
		parameter integer C_S_AXI_DATA_WIDTH	= 32,
		// Width of S_AXI address bus
		parameter integer C_S_AXI_ADDR_WIDTH	= 4,
		
		parameter integer DUT_RESET_VALUE	= 165

	)
	(
		// Users to add ports here

		// User ports ends
		// Do not modify the ports beyond this line

		// Global Clock Signal
		input wire  S_AXI_ACLK,
		// Global Reset Signal. This Signal is Active LOW
		input wire  S_AXI_ARESETN,
		// Write address (issued by master, acceped by Slave)
		input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_AWADDR,
		// Write channel Protection type. This signal indicates the
    		// privilege and security level of the transaction, and whether
    		// the transaction is a data access or an instruction access.
		input wire [2 : 0] S_AXI_AWPROT,
		// Write address valid. This signal indicates that the master signaling
    		// valid write address and control information.
		input wire  S_AXI_AWVALID,
		// Write address ready. This signal indicates that the slave is ready
    		// to accept an address and associated control signals.
		output wire  S_AXI_AWREADY,
		// Write data (issued by master, acceped by Slave) 
		input wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_WDATA,
		// Write strobes. This signal indicates which byte lanes hold
    		// valid data. There is one write strobe bit for each eight
    		// bits of the write data bus.    
		input wire [(C_S_AXI_DATA_WIDTH/8)-1 : 0] S_AXI_WSTRB,
		// Write valid. This signal indicates that valid write
    		// data and strobes are available.
		input wire  S_AXI_WVALID,
		// Write ready. This signal indicates that the slave
    		// can accept the write data.
		output wire  S_AXI_WREADY,
		// Write response. This signal indicates the status
    		// of the write transaction.
		output wire [1 : 0] S_AXI_BRESP,
		// Write response valid. This signal indicates that the channel
    		// is signaling a valid write response.
		output wire  S_AXI_BVALID,
		// Response ready. This signal indicates that the master
    		// can accept a write response.
		input wire  S_AXI_BREADY,
		// Read address (issued by master, acceped by Slave)
		input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_ARADDR,
		// Protection type. This signal indicates the privilege
    		// and security level of the transaction, and whether the
    		// transaction is a data access or an instruction access.
		input wire [2 : 0] S_AXI_ARPROT,
		// Read address valid. This signal indicates that the channel
    		// is signaling valid read address and control information.
		input wire  S_AXI_ARVALID,
		// Read address ready. This signal indicates that the slave is
    		// ready to accept an address and associated control signals.
		output wire  S_AXI_ARREADY,
		// Read data (issued by slave)
		output wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_RDATA,
		// Read response. This signal indicates the status of the
    		// read transfer.
		output wire [1 : 0] S_AXI_RRESP,
		// Read valid. This signal indicates that the channel is
    		// signaling the required read data.
		output wire  S_AXI_RVALID,
		// Read ready. This signal indicates that the master can
    		// accept the read data and response information.
		input wire  S_AXI_RREADY,
		
		// custom signals
		input config_done,
		//input fifo_full,
		output reg clk_2dut,
		output rst_2dut
	);

	// AXI4LITE signals
	reg [C_S_AXI_ADDR_WIDTH-1 : 0] 	axi_awaddr;
	reg  	axi_awready;
	reg  	axi_wready;
	reg [1 : 0] 	axi_bresp;
	reg  	axi_bvalid;
	reg [C_S_AXI_ADDR_WIDTH-1 : 0] 	axi_araddr;
	reg  	axi_arready;
	reg [C_S_AXI_DATA_WIDTH-1 : 0] 	axi_rdata;
	reg [1 : 0] 	axi_rresp;
	reg  	axi_rvalid;

	// Example-specific design signals
	// local parameter for addressing 32 bit / 64 bit C_S_AXI_DATA_WIDTH
	// ADDR_LSB is used for addressing 32/64 bit registers/memories
	// ADDR_LSB = 2 for 32 bits (n downto 2)
	// ADDR_LSB = 3 for 64 bits (n downto 3)
	localparam integer ADDR_LSB = (C_S_AXI_DATA_WIDTH/32) + 1;
	localparam integer OPT_MEM_ADDR_BITS = 1;
	//----------------------------------------------
	//-- Signals for user logic register space example
	//------------------------------------------------
	//-- Number of Slave Registers 4
	reg [C_S_AXI_DATA_WIDTH-1:0]	reset_value;
	reg [C_S_AXI_DATA_WIDTH-1:0]	clock_freq_cntr;
	reg [C_S_AXI_DATA_WIDTH-1:0]	reset_cycles;
	reg [C_S_AXI_DATA_WIDTH-1:0]	no_clk_pulse;
    
    reg [C_S_AXI_DATA_WIDTH-1:0]	clk_counter;
    reg [C_S_AXI_DATA_WIDTH-1:0]	pulse_counter;

	
	wire	 slv_reg_rden;
	wire	 slv_reg_wren;
	reg [C_S_AXI_DATA_WIDTH-1:0]	 reg_data_out;
	integer	 byte_index;
	reg	 aw_en;

	// I/O Connections assignments

	assign S_AXI_AWREADY	= axi_awready;
	assign S_AXI_WREADY	= axi_wready;
	assign S_AXI_BRESP	= axi_bresp;
	assign S_AXI_BVALID	= axi_bvalid;
	assign S_AXI_ARREADY	= axi_arready;
	assign S_AXI_RDATA	= axi_rdata;
	assign S_AXI_RRESP	= axi_rresp;
	assign S_AXI_RVALID	= axi_rvalid;
	// Implement axi_awready generation
	// axi_awready is asserted for one S_AXI_ACLK clock cycle when both
	// S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_awready is
	// de-asserted when reset is low.

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_awready <= 1'b0;
	      aw_en <= 1'b1;
	    end 
	  else
	    begin    
	      if (~axi_awready && S_AXI_AWVALID && S_AXI_WVALID && aw_en)
	        begin
	          // slave is ready to accept write address when 
	          // there is a valid write address and write data
	          // on the write address and data bus. This design 
	          // expects no outstanding transactions. 
	          axi_awready <= 1'b1;
	          aw_en <= 1'b0;
	        end
	        else if (S_AXI_BREADY && axi_bvalid)
	            begin
	              aw_en <= 1'b1;
	              axi_awready <= 1'b0;
	            end
	      else           
	        begin
	          axi_awready <= 1'b0;
	        end
	    end 
	end       

	// Implement axi_awaddr latching
	// This process is used to latch the address when both 
	// S_AXI_AWVALID and S_AXI_WVALID are valid. 

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_awaddr <= 0;
	    end 
	  else
	    begin    
	      if (~axi_awready && S_AXI_AWVALID && S_AXI_WVALID && aw_en)
	        begin
	          // Write Address latching 
	          axi_awaddr <= S_AXI_AWADDR;
	        end
	    end 
	end       

	// Implement axi_wready generation
	// axi_wready is asserted for one S_AXI_ACLK clock cycle when both
	// S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_wready is 
	// de-asserted when reset is low. 

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_wready <= 1'b0;
	    end 
	  else
	    begin    
	      if (~axi_wready && S_AXI_WVALID && S_AXI_AWVALID && aw_en )
	        begin
	          // slave is ready to accept write data when 
	          // there is a valid write address and write data
	          // on the write address and data bus. This design 
	          // expects no outstanding transactions. 
	          axi_wready <= 1'b1;
	        end
	      else
	        begin
	          axi_wready <= 1'b0;
	        end
	    end 
	end       

	// Implement memory mapped register select and write logic generation
	// The write data is accepted and written to memory mapped registers when
	// axi_awready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted. Write strobes are used to
	// select byte enables of slave registers while writing.
	// These registers are cleared when reset (active low) is applied.
	// Slave register write enable is asserted when valid address and data are available
	// and the slave is ready to accept the write address and write data.
	assign slv_reg_wren = axi_wready && S_AXI_WVALID && axi_awready && S_AXI_AWVALID;

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      reset_value <= DUT_RESET_VALUE;
	      clock_freq_cntr <= 'd10;
	      no_clk_pulse <= 'd808;
	     reset_cycles  <= 'd4;
	    end 
	  else begin
	    if (slv_reg_wren)
	      begin
	        case ( axi_awaddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB] )
	          2'h0:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 0
	                reset_value[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          2'h1:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 1
	                clock_freq_cntr[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          2'h2:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 2
	                reset_cycles[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          2'h3:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 3
	                no_clk_pulse[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          default : begin
	                      reset_value <= reset_value;
	                      clock_freq_cntr <= clock_freq_cntr;
	                      reset_cycles <= reset_cycles;
	                      no_clk_pulse <= no_clk_pulse;
	                    end
	        endcase
	      end
	    else
	      begin
	        if(pulse_counter[3:0] == reset_cycles[3:0] )
	         reset_cycles <= 0;	
	         
	        if (pulse_counter == no_clk_pulse && no_clk_pulse != 'd808)     
	         no_clk_pulse <= 'd0;

	      end  
	  end
	end    

	// Implement write response logic generation
	// The write response and response valid signals are asserted by the slave 
	// when axi_wready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted.  
	// This marks the acceptance of address and indicates the status of 
	// write transaction.

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_bvalid  <= 0;
	      axi_bresp   <= 2'b0;
	    end 
	  else
	    begin    
	      if (axi_awready && S_AXI_AWVALID && ~axi_bvalid && axi_wready && S_AXI_WVALID)
	        begin
	          // indicates a valid write response is available
	          axi_bvalid <= 1'b1;
	          axi_bresp  <= 2'b0; // 'OKAY' response 
	        end                   // work error responses in future
	      else
	        begin
	          if (S_AXI_BREADY && axi_bvalid) 
	            //check if bready is asserted while bvalid is high) 
	            //(there is a possibility that bready is always asserted high)   
	            begin
	              axi_bvalid <= 1'b0; 
	            end  
	        end
	    end
	end   

	// Implement axi_arready generation
	// axi_arready is asserted for one S_AXI_ACLK clock cycle when
	// S_AXI_ARVALID is asserted. axi_awready is 
	// de-asserted when reset (active low) is asserted. 
	// The read address is also latched when S_AXI_ARVALID is 
	// asserted. axi_araddr is reset to zero on reset assertion.

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_arready <= 1'b0;
	      axi_araddr  <= 32'b0;
	    end 
	  else
	    begin    
	      if (~axi_arready && S_AXI_ARVALID)
	        begin
	          // indicates that the slave has acceped the valid read address
	          axi_arready <= 1'b1;
	          // Read address latching
	          axi_araddr  <= S_AXI_ARADDR;
	        end
	      else
	        begin
	          axi_arready <= 1'b0;
	        end
	    end 
	end       

	// Implement axi_arvalid generation
	// axi_rvalid is asserted for one S_AXI_ACLK clock cycle when both 
	// S_AXI_ARVALID and axi_arready are asserted. The slave registers 
	// data are available on the axi_rdata bus at this instance. The 
	// assertion of axi_rvalid marks the validity of read data on the 
	// bus and axi_rresp indicates the status of read transaction.axi_rvalid 
	// is deasserted on reset (active low). axi_rresp and axi_rdata are 
	// cleared to zero on reset (active low).  
	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_rvalid <= 0;
	      axi_rresp  <= 0;
	    end 
	  else
	    begin    
	      if (axi_arready && S_AXI_ARVALID && ~axi_rvalid)
	        begin
	          // Valid read data is available at the read data bus
	          axi_rvalid <= 1'b1;
	          axi_rresp  <= 2'b0; // 'OKAY' response
	        end   
	      else if (axi_rvalid && S_AXI_RREADY)
	        begin
	          // Read data is accepted by the master
	          axi_rvalid <= 1'b0;
	        end                
	    end
	end    

	// Implement memory mapped register select and read logic generation
	// Slave register read enable is asserted when valid address is available
	// and the slave is ready to accept the read address.
	assign slv_reg_rden = axi_arready & S_AXI_ARVALID & ~axi_rvalid;
	always @(*)
	begin
	      // Address decoding for reading registers
	      case ( axi_araddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB] )
	        2'h0   : reg_data_out <= reset_value;
	        2'h1   : reg_data_out <= clock_freq_cntr;
	        2'h2   : reg_data_out <= reset_cycles;
	        2'h3   : reg_data_out <= no_clk_pulse;
	        default : reg_data_out <= 0;
	      endcase
	end

	// Output register or memory read data
	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_rdata  <= 0;
	    end 
	  else
	    begin    
	      // When there is a valid read address (S_AXI_ARVALID) with 
	      // acceptance of read address by the slave (axi_arready), 
	      // output the read dada 
	      if (slv_reg_rden)
	        begin
	          axi_rdata <= reg_data_out;     // register read data
	        end   
	    end
	end    

	// Add user logic here
	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 || !config_done || clock_freq_cntr == 'b0 ||   S_AXI_AWVALID || no_clk_pulse == 'b0 )
	    begin
	      clk_counter  <= 0;
	      clk_2dut <= 0;    
          pulse_counter <= 0;
	    end 
	  else
	    begin    
	      if (clk_counter == clock_freq_cntr)
	        begin
	          clk_2dut <= ~clk_2dut;  
	          clk_counter <= 'b0;
//	          if (pulse_counter == reset_cycles )
//	          	pulse_counter <= 0;
//	          else
	          pulse_counter <= pulse_counter +1;
   
	        end
	       else
	        begin
	          clk_counter <= clk_counter +1;
	          clk_2dut <= clk_2dut;     
	        end   
	    end
	end 

	
	assign rst_2dut = !(config_done?(reset_value == DUT_RESET_VALUE)? (pulse_counter[3:0] < reset_cycles[3:0])?1'b0:1'b1:1'b0:1'b0); 
	  
	// User logic ends

	endmodule

